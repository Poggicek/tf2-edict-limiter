"Games"
{
    "tf"
    {
        "Functions"
        {
            "IServerPluginCallbacks::OnEdictAllocated"
            {
                "offset" "IServerPluginCallbacks::OnEdictAllocated"
                "hooktype" "raw"
                "return" "void"
                "this" "ignore"
                "arguments"
                {
                    "edict"
                    {
                        "type" "edict"
                    }
                }
            }

            "IServerPluginCallbacks::OnEdictFreed"
            {
                "offset" "IServerPluginCallbacks::OnEdictFreed"
                "hooktype" "raw"
                "return" "void"
                "this" "ignore"
                "arguments"
                {
                    "edict"
                    {
                        "type" "edict"
                    }
                }
            }
            "ED_Alloc"
            {
                "signature" "ED_Alloc"
                "hooktype"  "raw"
                "return"    "void"
                "this"      "ignore"
                "arguments"
                {
                    "forcedIdx"
                    {
                        "type" "int"
                    }
                }
            }
            "CTFPlayer::UpdateExpression"
            {
                "signature" "CTFPlayer::UpdateExpression"
                "hooktype"  "raw"
                "callconv"  "thiscall"
                "return"    "void"
                "this"      "ignore"
             }
            "CTFPlayer::SpeakWeaponFire"
            {
                "signature" "CTFPlayer::SpeakWeaponFire"
                "hooktype"  "raw"
                "callconv"  "thiscall"
                "return"    "void"
                "this"      "ignore"
                "arguments"
                {
                    "concept"
                    {
                        "type" "int"
                    }
                }
             }
        }

        "Offsets"
        {
            "IServerPluginCallbacks::OnEdictAllocated"
            {
                "windows" "16"
                "linux" "16"
            }

            "IServerPluginCallbacks::OnEdictFreed"
            {
                "windows" "17"
                "linux" "17"
            }
        }

        "Signatures"
        {
            "CreateInterface"
            {
                "library" "engine"
                "windows" "@CreateInterface"
                "linux" "@CreateInterface"
            }
            "CEntityFactoryDictionary::Create"
            {
                "library" "server"
                "windows" "\x55\x8B\xEC\x8B\x01\x56\x8B\x75\x08\x56\xFF\x50\x0C"
                "linux" "@_ZN24CEntityFactoryDictionary6CreateEPKc"
            }
            "ED_Alloc"
            {
                "library" "engine"
                // ED_Alloc( %d ) - invalid edict index specified.
                "windows" "\x55\x8B\xEC\x83\xEC\x10\x56\x8B\x75\x08\x57\x85\xF6"
                "linux" "@_Z8ED_Alloci"
            }
            // for getting sv.num_edicts etc
            "sv"
            {
                "library"   "engine"
                "linux"     "@sv"
            }

            // blocking facial flexes
            "CTFPlayer::SpeakWeaponFire"
            {
                "library"   "server"
                "windows"   "\x55\x8B\xEC\x8B\x45\x08\x81\xEC\x04\x01\x00\x00"
                "linux"     "@_ZN9CTFPlayer15SpeakWeaponFireEi"
            }

            // blocking facial flexes
            "CTFPlayer::UpdateExpression"
            {
                "library"   "server"
                "windows"   "\x55\x8B\xEC\x81\xEC\x08\x01\x00\x00\x8D\x85\xF8\xFE\xFF\xFF\x56\x68\x04\x01\x00\x00"
                "linux"     "@_ZN9CTFPlayer16UpdateExpressionEv"
            }

        }
        "MemPatches"
        {
            "ED_Alloc::nop"
            {
                "signature"     "ED_Alloc"
                "linux"
                {
                    // always try to alloc a new ent, regardless of FreeTime
                    "offset"    "0224h"
                    "verify"    "\x0F\x86\x2A\x2A\x2A\x2A"
                    "patch"     "\x90\x90\x90\x90\x90\x90"
                }
                "windows"
                {
                    "offset"    "0EEh"
                    "verify"    "\x77\x1B"
                    "patch"     "\xEB\x1B"
                }
            }
        }


    }
}